
flash_programmer_avr2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000550  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000550  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018a1  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fd5  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c37  00000000  00000000  00002fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000087f  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c5  00000000  00000000  00004783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 32       	cpi	r26, 0x2A	; 42
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	1d c2       	rjmp	.+1082   	; 0x54c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:


#include "main.h"

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	28 97       	sbiw	r28, 0x08	; 8
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	39 e6       	ldi	r19, 0x69	; 105
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x24>
 138:	00 00       	nop
	_delay_ms(500);
	system_init();
 13a:	e3 d1       	rcall	.+966    	; 0x502 <system_init>
	
	//uint8_t in_char = 0;
	uint32_t base_address = 0x00;
	uint8_t offset = 0x00;
	
	uint16_t data = 0;
 13c:	1a 82       	std	Y+2, r1	; 0x02
 13e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t data_read = 0;
 140:	1c 82       	std	Y+4, r1	; 0x04
 142:	1b 82       	std	Y+3, r1	; 0x03
	//uint8_t secon_byte = 0xAD;
	
	uint8_t control_pins_status = 0;
	const uint8_t control_mask = 0b01110000;
	
	control_pins_status = PINB & control_mask;
 144:	83 b1       	in	r24, 0x03	; 3
 146:	80 77       	andi	r24, 0x70	; 112
	PORTB &= ~(1 << PB7);
 148:	2f 98       	cbi	0x05, 7	; 5
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	27 ea       	ldi	r18, 0xA7	; 167
 14e:	31 e6       	ldi	r19, 0x61	; 97
 150:	91 50       	subi	r25, 0x01	; 1
 152:	20 40       	sbci	r18, 0x00	; 0
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x3c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x46>
 15a:	00 00       	nop
	_delay_ms(2000);
	if (control_pins_status == 0x70)
 15c:	80 37       	cpi	r24, 0x70	; 112
 15e:	09 f0       	breq	.+2      	; 0x162 <main+0x4e>
	{
		flash_erase_entire_chip();
 160:	56 c0       	rjmp	.+172    	; 0x20e <main+0xfa>
 162:	39 d1       	rcall	.+626    	; 0x3d6 <flash_erase_entire_chip>
			data |= (USART_0_read() << 8);
			//PORTB &= ~(1 << PB7);
			flash_program_one_word(&address, &data);
		}
	}
	DDRB |= (1 << PB7);
 164:	27 9a       	sbi	0x04, 7	; 4
	
	if (control_pins_status == 0x20)
	{
		for (uint32_t address = 0x00; address < 0x40000; address++)
		{
			data = USART_0_read();
 166:	41 c0       	rjmp	.+130    	; 0x1ea <main+0xd6>
 168:	e1 d1       	rcall	.+962    	; 0x52c <USART_0_read>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9a 83       	std	Y+2, r25	; 0x02
			//PORTB |= (1 << PB7);
			data |= (USART_0_read() << 8);
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	dd d1       	rcall	.+954    	; 0x52c <USART_0_read>
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02
 176:	38 2b       	or	r19, r24
 178:	3a 83       	std	Y+2, r19	; 0x02
 17a:	29 83       	std	Y+1, r18	; 0x01
			//PORTB &= ~(1 << PB7);
			flash_program_one_word(&address, &data);
 17c:	be 01       	movw	r22, r28
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	ce 01       	movw	r24, r28
 184:	05 96       	adiw	r24, 0x05	; 5
 186:	46 d0       	rcall	.+140    	; 0x214 <flash_program_one_word>
		flash_erase_entire_chip();
	}
	
	if (control_pins_status == 0x20)
	{
		for (uint32_t address = 0x00; address < 0x40000; address++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	a4 40       	sbci	r26, 0x04	; 4
 1a2:	b1 05       	cpc	r27, r1
 1a4:	08 f3       	brcs	.-62     	; 0x168 <main+0x54>
			data |= (USART_0_read() << 8);
			//PORTB &= ~(1 << PB7);
			flash_program_one_word(&address, &data);
		}
	}
	DDRB |= (1 << PB7);
 1a6:	27 9a       	sbi	0x04, 7	; 4
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <main+0xd6>
 1aa:	27 9a       	sbi	0x04, 7	; 4
	if (control_pins_status == 0x00)
 1ac:	81 11       	cpse	r24, r1
 1ae:	1d c0       	rjmp	.+58     	; 0x1ea <main+0xd6>
	{
		
		for (uint32_t address = base_address; address < 0x40000/*(base_address + offset)*/; address++)
 1b0:	1d 82       	std	Y+5, r1	; 0x05
 1b2:	1e 82       	std	Y+6, r1	; 0x06
 1b4:	1f 82       	std	Y+7, r1	; 0x07
 1b6:	18 86       	std	Y+8, r1	; 0x08
		{
			
			flash_read_one_word(&address, &data_read);
 1b8:	be 01       	movw	r22, r28
 1ba:	6d 5f       	subi	r22, 0xFD	; 253
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	ce 01       	movw	r24, r28
	}
}

void echo(uint8_t ch)
{
	USART_0_write(ch);
 1c0:	05 96       	adiw	r24, 0x05	; 5
 1c2:	ce d0       	rcall	.+412    	; 0x360 <flash_read_one_word>
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	ba d1       	rcall	.+884    	; 0x53c <USART_0_write>
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	b8 d1       	rcall	.+880    	; 0x53c <USART_0_write>
	}
	DDRB |= (1 << PB7);
	if (control_pins_status == 0x00)
	{
		
		for (uint32_t address = base_address; address < 0x40000/*(base_address + offset)*/; address++)
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	af 81       	ldd	r26, Y+7	; 0x07
 1d2:	b8 85       	ldd	r27, Y+8	; 0x08
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	a1 1d       	adc	r26, r1
 1d8:	b1 1d       	adc	r27, r1
 1da:	8d 83       	std	Y+5, r24	; 0x05
 1dc:	9e 83       	std	Y+6, r25	; 0x06
 1de:	af 83       	std	Y+7, r26	; 0x07
 1e0:	b8 87       	std	Y+8, r27	; 0x08
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	a4 40       	sbci	r26, 0x04	; 4
 1e6:	b1 05       	cpc	r27, r1
 1e8:	38 f3       	brcs	.-50     	; 0x1b8 <main+0xa4>
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	93 ed       	ldi	r25, 0xD3	; 211
 1ee:	20 e3       	ldi	r18, 0x30	; 48
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	20 40       	sbci	r18, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xdc>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xe6>
 1fa:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(1000);

		PORTB ^= (1 << PB7);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	85 b9       	out	0x05, r24	; 5
 202:	f3 cf       	rjmp	.-26     	; 0x1ea <main+0xd6>
		flash_erase_entire_chip();
	}
	
	if (control_pins_status == 0x20)
	{
		for (uint32_t address = 0x00; address < 0x40000; address++)
 204:	1d 82       	std	Y+5, r1	; 0x05
 206:	1e 82       	std	Y+6, r1	; 0x06
 208:	1f 82       	std	Y+7, r1	; 0x07
 20a:	18 86       	std	Y+8, r1	; 0x08
 20c:	ad cf       	rjmp	.-166    	; 0x168 <main+0x54>
	if (control_pins_status == 0x70)
	{
		flash_erase_entire_chip();
	}
	
	if (control_pins_status == 0x20)
 20e:	80 32       	cpi	r24, 0x20	; 32
 210:	61 f6       	brne	.-104    	; 0x1aa <main+0x96>
 212:	f8 cf       	rjmp	.-16     	; 0x204 <main+0xf0>

00000214 <flash_program_one_word>:
	_NOP();
	FLASH_CTRL_PORT &= ~(1 << CE_PIN);
}

void flash_program_one_word(uint32_t *address, uint16_t *word)
{
 214:	6f 92       	push	r6
 216:	7f 92       	push	r7
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	2f 97       	sbiw	r28, 0x0f	; 15
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	ac 01       	movw	r20, r24
	// Byte program sequence
	// 1st byte cycle: Address: 0x5555, Data: 0xAA
	// 2nd byte cycle: Address: 0x2AAA, Data: 0x55
	// 3rd byte cycle: Address: 0x5555, Data: 0xA0
	const uint32_t address_sequence[] = {0x5555, 0x2AAA, 0x5555};
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	e0 e0       	ldi	r30, 0x00	; 0
 246:	f2 e0       	ldi	r31, 0x02	; 2
 248:	de 01       	movw	r26, r28
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <flash_program_one_word+0x38>
	const uint8_t data_sequence[] = {0xAA, 0x55, 0xA0};
 254:	8a ea       	ldi	r24, 0xAA	; 170
 256:	8d 87       	std	Y+13, r24	; 0x0d
 258:	85 e5       	ldi	r24, 0x55	; 85
 25a:	8e 87       	std	Y+14, r24	; 0x0e
 25c:	80 ea       	ldi	r24, 0xA0	; 160
 25e:	8f 87       	std	Y+15, r24	; 0x0f
 * Write/Erase operations must be preceded by 3/6 byte load sequence.
 */
static inline void byte_load_sequence(struct SDP_command *byte_sequence)
{
	// Set data ports to output in case they aren't
	DATA_D0_D7_DDR = 0xFF;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	87 b9       	out	0x07, r24	; 7
	DATA_D8_D15_DDR = 0xFF;
 264:	81 b9       	out	0x01, r24	; 1
	
	// Set CE low in case it isn't
	FLASH_CTRL_PORT &= ~(1 << CE_PIN);
 266:	eb e0       	ldi	r30, 0x0B	; 11
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	80 81       	ld	r24, Z
 26c:	87 7f       	andi	r24, 0xF7	; 247
 26e:	80 83       	st	Z, r24
	
	// Set OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
 270:	80 81       	ld	r24, Z
 272:	80 61       	ori	r24, 0x10	; 16
 274:	80 83       	st	Z, r24
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	3c 01       	movw	r6, r24
 27c:	9e 01       	movw	r18, r28
 27e:	23 5f       	subi	r18, 0xF3	; 243
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	79 01       	movw	r14, r18
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 284:	08 e0       	ldi	r16, 0x08	; 8
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	63 01       	movw	r12, r6
 * Address has to be spread out over three physical ports.
 */
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
 28a:	d3 01       	movw	r26, r6
 28c:	8c 91       	ld	r24, X
 28e:	81 bb       	out	0x11, r24	; 17
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 290:	8d 90       	ld	r8, X+
 292:	9d 90       	ld	r9, X+
 294:	ad 90       	ld	r10, X+
 296:	bd 90       	ld	r11, X+
 298:	3d 01       	movw	r6, r26
 29a:	89 2c       	mov	r8, r9
 29c:	9a 2c       	mov	r9, r10
 29e:	ab 2c       	mov	r10, r11
 2a0:	bb 24       	eor	r11, r11
 2a2:	d8 01       	movw	r26, r16
 2a4:	8c 92       	st	X, r8
	// Set up address on lines A16 -A18
	ADDR_A16_A18_PORT &= ~ADDR_A16_A18_MASK;
 2a6:	80 81       	ld	r24, Z
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	80 83       	st	Z, r24
	ADDR_A16_A18_PORT |= (*address >> 16 & ADDR_A16_A18_MASK);
 2ac:	90 81       	ld	r25, Z
 2ae:	d6 01       	movw	r26, r12
 2b0:	12 96       	adiw	r26, 0x02	; 2
 2b2:	8c 91       	ld	r24, X
 2b4:	87 70       	andi	r24, 0x07	; 7
 2b6:	89 2b       	or	r24, r25
 2b8:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < byte_sequence->byte_count; i++)
	{
		// Load address and data into port registers
		write_address_to_port(byte_sequence->address + i);
		// Sending same data to both memory chips
		DATA_D0_D7_PORT = *(byte_sequence->data + i);
 2ba:	d9 01       	movw	r26, r18
 2bc:	8c 91       	ld	r24, X
 2be:	88 b9       	out	0x08, r24	; 8
		DATA_D8_D15_PORT = *(byte_sequence->data + i);
 2c0:	8d 91       	ld	r24, X+
 2c2:	9d 01       	movw	r18, r26
 2c4:	82 b9       	out	0x02, r24	; 2
		_NOP();	// for sync
 2c6:	00 00       	nop
		
		// Address is latched into memory on falling edge of WE
		FLASH_CTRL_PORT &= ~(1 << WE_PIN);
 2c8:	90 81       	ld	r25, Z
 2ca:	9f 7d       	andi	r25, 0xDF	; 223
 2cc:	90 83       	st	Z, r25
		_NOP();	// Min pulse width low: 40ns
 2ce:	00 00       	nop
		
		// Data is latched into memory on rising edge of WE
		FLASH_CTRL_PORT |= (1 << WE_PIN);
 2d0:	90 81       	ld	r25, Z
 2d2:	90 62       	ori	r25, 0x20	; 32
 2d4:	90 83       	st	Z, r25
		_NOP();	// Min pulse width high: 30ns
 2d6:	00 00       	nop
	
	// Set OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
	
	// Struct member used to indicate length of an address/data arrays
	for (uint8_t i = 0; i < byte_sequence->byte_count; i++)
 2d8:	6e 14       	cp	r6, r14
 2da:	7f 04       	cpc	r7, r15
 2dc:	a9 f6       	brne	.-86     	; 0x288 <flash_program_one_word+0x74>
 * Address has to be spread out over three physical ports.
 */
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
 2de:	fa 01       	movw	r30, r20
 2e0:	80 81       	ld	r24, Z
 2e2:	81 bb       	out	0x11, r24	; 17
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 2e4:	80 81       	ld	r24, Z
 2e6:	91 81       	ldd	r25, Z+1	; 0x01
 2e8:	a2 81       	ldd	r26, Z+2	; 0x02
 2ea:	b3 81       	ldd	r27, Z+3	; 0x03
 2ec:	89 2f       	mov	r24, r25
 2ee:	9a 2f       	mov	r25, r26
 2f0:	ab 2f       	mov	r26, r27
 2f2:	bb 27       	eor	r27, r27
 2f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	// Set up address on lines A16 -A18
	ADDR_A16_A18_PORT &= ~ADDR_A16_A18_MASK;
 2f8:	eb e0       	ldi	r30, 0x0B	; 11
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	80 81       	ld	r24, Z
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	80 83       	st	Z, r24
	ADDR_A16_A18_PORT |= (*address >> 16 & ADDR_A16_A18_MASK);
 302:	90 81       	ld	r25, Z
 304:	da 01       	movw	r26, r20
 306:	12 96       	adiw	r26, 0x02	; 2
 308:	8c 91       	ld	r24, X
 30a:	87 70       	andi	r24, 0x07	; 7
 30c:	89 2b       	or	r24, r25
 30e:	80 83       	st	Z, r24
 * Each chip receives half of a 16 bit word.
 */
static inline void write_data_to_port(const uint16_t  *data)
{
	// Low byte on D0 - D7
	DATA_D0_D7_PORT = *data;
 310:	db 01       	movw	r26, r22
 312:	8c 91       	ld	r24, X
 314:	88 b9       	out	0x08, r24	; 8
	// High byte on D8 - D15
	DATA_D8_D15_PORT = (*data >> 8);
 316:	11 96       	adiw	r26, 0x01	; 1
 318:	8c 91       	ld	r24, X
 31a:	82 b9       	out	0x02, r24	; 2
	byte_load_sequence(&prog_byte);
	
	// Load byte address and data.
	write_address_to_port(address);
	write_data_to_port(word);
	_NOP(); // Address setup time
 31c:	00 00       	nop
	
	// Pull WE low to latch the address
	FLASH_CTRL_PORT &= ~(1 << WE_PIN);
 31e:	80 81       	ld	r24, Z
 320:	8f 7d       	andi	r24, 0xDF	; 223
 322:	80 83       	st	Z, r24
	_NOP(); // WE pulse width low
 324:	00 00       	nop
	
	// Pull WE high to latch data
	FLASH_CTRL_PORT |= (1 << WE_PIN);
 326:	80 81       	ld	r24, Z
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	80 83       	st	Z, r24
	_NOP(); // WE pulse width high
 32c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	ba e1       	ldi	r27, 0x1A	; 26
 330:	ba 95       	dec	r27
 332:	f1 f7       	brne	.-4      	; 0x330 <flash_program_one_word+0x11c>
 334:	00 c0       	rjmp	.+0      	; 0x336 <flash_program_one_word+0x122>
	_delay_us(5);
}
 336:	2f 96       	adiw	r28, 0x0f	; 15
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	bf 90       	pop	r11
 354:	af 90       	pop	r10
 356:	9f 90       	pop	r9
 358:	8f 90       	pop	r8
 35a:	7f 90       	pop	r7
 35c:	6f 90       	pop	r6
 35e:	08 95       	ret

00000360 <flash_read_one_word>:

void flash_read_one_word(uint32_t *address, uint16_t *word)
{
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	dc 01       	movw	r26, r24
	// Set data ports to input in case they aren't
	DATA_D0_D7_DDR = 0x00;
 366:	17 b8       	out	0x07, r1	; 7
	DATA_D8_D15_DDR = 0x00;
 368:	11 b8       	out	0x01, r1	; 1
	
	// WE should be high for read operation
	FLASH_CTRL_PORT |= (1 << WE_PIN);
 36a:	eb e0       	ldi	r30, 0x0B	; 11
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	80 81       	ld	r24, Z
 370:	80 62       	ori	r24, 0x20	; 32
 372:	80 83       	st	Z, r24
 * Address has to be spread out over three physical ports.
 */
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
 374:	8c 91       	ld	r24, X
 376:	81 bb       	out	0x11, r24	; 17
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 378:	0d 91       	ld	r16, X+
 37a:	1d 91       	ld	r17, X+
 37c:	2d 91       	ld	r18, X+
 37e:	3c 91       	ld	r19, X
 380:	13 97       	sbiw	r26, 0x03	; 3
 382:	01 2f       	mov	r16, r17
 384:	12 2f       	mov	r17, r18
 386:	23 2f       	mov	r18, r19
 388:	33 27       	eor	r19, r19
 38a:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	// Set up address on lines A16 -A18
	ADDR_A16_A18_PORT &= ~ADDR_A16_A18_MASK;
 38e:	80 81       	ld	r24, Z
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	80 83       	st	Z, r24
	ADDR_A16_A18_PORT |= (*address >> 16 & ADDR_A16_A18_MASK);
 394:	90 81       	ld	r25, Z
 396:	12 96       	adiw	r26, 0x02	; 2
 398:	8c 91       	ld	r24, X
 39a:	87 70       	andi	r24, 0x07	; 7
 39c:	89 2b       	or	r24, r25
 39e:	80 83       	st	Z, r24
	
	// Put address on the bus
	write_address_to_port(address);
	
	// Pull CE low to enable chip in case it isn't
	FLASH_CTRL_PORT &= ~(1 << CE_PIN);
 3a0:	80 81       	ld	r24, Z
 3a2:	87 7f       	andi	r24, 0xF7	; 247
 3a4:	80 83       	st	Z, r24
	
	// Pull OE low to activate output
	FLASH_CTRL_PORT &= ~(1 << OE_PIN);
 3a6:	80 81       	ld	r24, Z
 3a8:	8f 7e       	andi	r24, 0xEF	; 239
 3aa:	80 83       	st	Z, r24
	
	// Wait for address access time min 70ns
	_NOP(); // one NOP should be 62.5ns at 16MHz
 3ac:	00 00       	nop
	PORTB |= (1 << PB7);
 3ae:	2f 9a       	sbi	0x05, 7	; 5
	// Read high byte from data lines D15 - D8
	*word = (DATA_D8_D15_PIN << 8);
 3b0:	80 b1       	in	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	98 2f       	mov	r25, r24
 3b6:	88 27       	eor	r24, r24
 3b8:	db 01       	movw	r26, r22
 3ba:	11 96       	adiw	r26, 0x01	; 1
 3bc:	9c 93       	st	X, r25
 3be:	8e 93       	st	-X, r24
	// Read low byte from data lines D7 - D0
	*word |= DATA_D0_D7_PIN;
 3c0:	26 b1       	in	r18, 0x06	; 6
 3c2:	82 2b       	or	r24, r18
 3c4:	8d 93       	st	X+, r24
 3c6:	9c 93       	st	X, r25
	PORTB &= ~(1 << PB7);
 3c8:	2f 98       	cbi	0x05, 7	; 5
	// Pull OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
 3ca:	80 81       	ld	r24, Z
 3cc:	80 61       	ori	r24, 0x10	; 16
 3ce:	80 83       	st	Z, r24
}
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <flash_erase_entire_chip>:

void flash_erase_entire_chip(void)
{
 3d6:	af 92       	push	r10
 3d8:	bf 92       	push	r11
 3da:	cf 92       	push	r12
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	6e 97       	sbiw	r28, 0x1e	; 30
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	// 2nd byte cycle: Address: 0x2AAA, Data: 0x55
	// 3rd byte cycle: Address: 0x5555, Data: 0x80
	// 4th byte cycle: Address: 0x5555, Data: 0xAA
	// 5th byte cycle: Address: 0x2AAA, Data: 0x55
	// 6th byte cycle: Address: 0x5555, Data: 0x10
	const uint32_t address_sequence[] = {0x5555, 0x2AAA, 0x5555, 0x5555, 0x2AAA, 0x5555};
 3fa:	88 e1       	ldi	r24, 0x18	; 24
 3fc:	ec e0       	ldi	r30, 0x0C	; 12
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	de 01       	movw	r26, r28
 402:	11 96       	adiw	r26, 0x01	; 1
 404:	01 90       	ld	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	8a 95       	dec	r24
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	const uint8_t data_sequence[] = {0xAA, 0x55, 0x80, 0xAA, 0x55, 0x10};
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	e4 e2       	ldi	r30, 0x24	; 36
 410:	f2 e0       	ldi	r31, 0x02	; 2
 412:	de 01       	movw	r26, r28
 414:	59 96       	adiw	r26, 0x19	; 25
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 * Write/Erase operations must be preceded by 3/6 byte load sequence.
 */
static inline void byte_load_sequence(struct SDP_command *byte_sequence)
{
	// Set data ports to output in case they aren't
	DATA_D0_D7_DDR = 0xFF;
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	87 b9       	out	0x07, r24	; 7
	DATA_D8_D15_DDR = 0xFF;
 422:	81 b9       	out	0x01, r24	; 1
	
	// Set CE low in case it isn't
	FLASH_CTRL_PORT &= ~(1 << CE_PIN);
 424:	eb e0       	ldi	r30, 0x0B	; 11
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	80 81       	ld	r24, Z
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	80 83       	st	Z, r24
	
	// Set OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
 42e:	80 81       	ld	r24, Z
 430:	80 61       	ori	r24, 0x10	; 16
 432:	80 83       	st	Z, r24
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	5c 01       	movw	r10, r24
 43a:	9e 01       	movw	r18, r28
 43c:	27 5e       	subi	r18, 0xE7	; 231
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	b9 01       	movw	r22, r18
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 442:	48 e0       	ldi	r20, 0x08	; 8
 444:	51 e0       	ldi	r21, 0x01	; 1
 446:	85 01       	movw	r16, r10
 * Address has to be spread out over three physical ports.
 */
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
 448:	d5 01       	movw	r26, r10
 44a:	8c 91       	ld	r24, X
 44c:	81 bb       	out	0x11, r24	; 17
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 44e:	cd 90       	ld	r12, X+
 450:	dd 90       	ld	r13, X+
 452:	ed 90       	ld	r14, X+
 454:	fd 90       	ld	r15, X+
 456:	5d 01       	movw	r10, r26
 458:	cd 2c       	mov	r12, r13
 45a:	de 2c       	mov	r13, r14
 45c:	ef 2c       	mov	r14, r15
 45e:	ff 24       	eor	r15, r15
 460:	da 01       	movw	r26, r20
 462:	cc 92       	st	X, r12
	// Set up address on lines A16 -A18
	ADDR_A16_A18_PORT &= ~ADDR_A16_A18_MASK;
 464:	80 81       	ld	r24, Z
 466:	88 7f       	andi	r24, 0xF8	; 248
 468:	80 83       	st	Z, r24
	ADDR_A16_A18_PORT |= (*address >> 16 & ADDR_A16_A18_MASK);
 46a:	90 81       	ld	r25, Z
 46c:	d8 01       	movw	r26, r16
 46e:	12 96       	adiw	r26, 0x02	; 2
 470:	8c 91       	ld	r24, X
 472:	87 70       	andi	r24, 0x07	; 7
 474:	89 2b       	or	r24, r25
 476:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < byte_sequence->byte_count; i++)
	{
		// Load address and data into port registers
		write_address_to_port(byte_sequence->address + i);
		// Sending same data to both memory chips
		DATA_D0_D7_PORT = *(byte_sequence->data + i);
 478:	d9 01       	movw	r26, r18
 47a:	8c 91       	ld	r24, X
 47c:	88 b9       	out	0x08, r24	; 8
		DATA_D8_D15_PORT = *(byte_sequence->data + i);
 47e:	8d 91       	ld	r24, X+
 480:	9d 01       	movw	r18, r26
 482:	82 b9       	out	0x02, r24	; 2
		_NOP();	// for sync
 484:	00 00       	nop
		
		// Address is latched into memory on falling edge of WE
		FLASH_CTRL_PORT &= ~(1 << WE_PIN);
 486:	80 81       	ld	r24, Z
 488:	8f 7d       	andi	r24, 0xDF	; 223
 48a:	80 83       	st	Z, r24
		_NOP();	// Min pulse width low: 40ns
 48c:	00 00       	nop
		
		// Data is latched into memory on rising edge of WE
		FLASH_CTRL_PORT |= (1 << WE_PIN);
 48e:	80 81       	ld	r24, Z
 490:	80 62       	ori	r24, 0x20	; 32
 492:	80 83       	st	Z, r24
		_NOP();	// Min pulse width high: 30ns
 494:	00 00       	nop
	
	// Set OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
	
	// Struct member used to indicate length of an address/data arrays
	for (uint8_t i = 0; i < byte_sequence->byte_count; i++)
 496:	a6 16       	cp	r10, r22
 498:	b7 06       	cpc	r11, r23
 49a:	a9 f6       	brne	.-86     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	bf ef       	ldi	r27, 0xFF	; 255
 49e:	21 ee       	ldi	r18, 0xE1	; 225
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	b1 50       	subi	r27, 0x01	; 1
 4a4:	20 40       	sbci	r18, 0x00	; 0
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4ac:	00 00       	nop
	
	byte_load_sequence(&erase_chip);
	
	// Chip-Erase time
	_delay_ms(100);
 4ae:	6e 96       	adiw	r28, 0x1e	; 30
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	08 95       	ret

000004d0 <i_o_init>:
}

void i_o_init()
{
	// Disable internal pull up resistors
	MCUCR |= (1 << PUD);
 4d0:	85 b7       	in	r24, 0x35	; 53
 4d2:	80 61       	ori	r24, 0x10	; 16
 4d4:	85 bf       	out	0x35, r24	; 53
	
	// Set flash memory control lines to output
	FLASH_CTRL_DDR |= (1 << CE_PIN) | (1 << OE_PIN) | (1 << WE_PIN);
 4d6:	ea e0       	ldi	r30, 0x0A	; 10
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	80 81       	ld	r24, Z
 4dc:	88 63       	ori	r24, 0x38	; 56
 4de:	80 83       	st	Z, r24
	
	// Flash memory control lines are active low, start disabled
	FLASH_CTRL_PORT |= (1 << CE_PIN) | (1 << OE_PIN) | (1 << WE_PIN);	
 4e0:	ab e0       	ldi	r26, 0x0B	; 11
 4e2:	b1 e0       	ldi	r27, 0x01	; 1
 4e4:	8c 91       	ld	r24, X
 4e6:	88 63       	ori	r24, 0x38	; 56
 4e8:	8c 93       	st	X, r24
	
	// Set address bus pins A16 - A18 to output
	ADDR_A16_A18_DDR |= ADDR_A16_A18_MASK;
 4ea:	80 81       	ld	r24, Z
 4ec:	87 60       	ori	r24, 0x07	; 7
 4ee:	80 83       	st	Z, r24
	
	// Set address bus pins A8 - A15 to output
	ADDR_A8_A15_DDR = 0xFF;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	
	// Set address bus pins A0 - A7 to output
	ADDR_A0_A7_DDR = 0xFF;
 4f6:	80 bb       	out	0x10, r24	; 16
	//DATA_D8_D15_DDR = 0xFF;
	
	// Set data bus pins D0 - D7 to output
	//DATA_D0_D7_DDR = 0xFF;
	
	DDRB |= (1 << PB7);
 4f8:	27 9a       	sbi	0x04, 7	; 4
	
	// temporary
	DDRB &= ~(1 << PB6);
 4fa:	26 98       	cbi	0x04, 6	; 4
	DDRB &= ~(1 << PB5);
 4fc:	25 98       	cbi	0x04, 5	; 4
	DDRB &= ~(1 << PB4);
 4fe:	24 98       	cbi	0x04, 4	; 4
 500:	08 95       	ret

00000502 <system_init>:


void device_init()
{
	//TIMER_0_init();
	USART_0_init();
 502:	02 d0       	rcall	.+4      	; 0x508 <USART_0_init>
#include <setup.h>

void system_init()
{
	device_init();
	i_o_init();
 504:	e5 cf       	rjmp	.-54     	; 0x4d0 <i_o_init>
 506:	08 95       	ret

00000508 <USART_0_init>:
 508:	e4 e6       	ldi	r30, 0x64	; 100
}

bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	80 83       	st	Z, r24
 512:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 516:	80 e1       	ldi	r24, 0x10	; 16
 518:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 522:	88 e9       	ldi	r24, 0x98	; 152
 524:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret

0000052c <USART_0_read>:

uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
 52c:	e0 ec       	ldi	r30, 0xC0	; 192
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	88 23       	and	r24, r24
 534:	ec f7       	brge	.-6      	; 0x530 <USART_0_read+0x4>
	;
	return UDR0;
 536:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 53a:	08 95       	ret

0000053c <USART_0_write>:

void USART_0_write(const uint8_t data)
{
	UDR0 = data;
 53c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (!(UCSR0A & (1 << UDRE0)));
 540:	e0 ec       	ldi	r30, 0xC0	; 192
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	85 ff       	sbrs	r24, 5
 548:	fd cf       	rjmp	.-6      	; 0x544 <USART_0_write+0x8>
}
 54a:	08 95       	ret

0000054c <_exit>:
 54c:	f8 94       	cli

0000054e <__stop_program>:
 54e:	ff cf       	rjmp	.-2      	; 0x54e <__stop_program>
