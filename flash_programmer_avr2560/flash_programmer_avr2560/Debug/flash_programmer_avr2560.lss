
flash_programmer_avr2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017b3  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ff5  00000000  00000000  00001c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b68  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  00003760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000878  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000846  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004afa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	af c0       	rjmp	.+350    	; 0x270 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:


#include "main.h"

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x8>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x12>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x1c>
 130:	00 00       	nop
	_delay_ms(500);
	system_init();
 132:	81 d0       	rcall	.+258    	; 0x236 <system_init>
	
	//uint8_t in_char = 0;
	uint8_t write_flag = 0;
	uint8_t read_flag = 0;
	uint32_t base = 0x00;
	uint32_t base_address = base;
 134:	19 82       	std	Y+1, r1	; 0x01
 136:	1a 82       	std	Y+2, r1	; 0x02
 138:	1b 82       	std	Y+3, r1	; 0x03
 13a:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t data = 0;
	uint16_t data_read = 0;
 13c:	1e 82       	std	Y+6, r1	; 0x06
 13e:	1d 82       	std	Y+5, r1	; 0x05
	
	write_flag = 0;
	read_flag = 1;
	//flash_erase_entire_chip();
	//memory_good();
	PORTB &= (1 << PB7);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	80 78       	andi	r24, 0x80	; 128
 144:	85 b9       	out	0x05, r24	; 5
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	93 ec       	ldi	r25, 0xC3	; 195
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x38>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x42>
 156:	00 00       	nop
			
			write_flag = 0;
			read_flag = 1;
		}
		_delay_ms(4000);
		base_address = 0x00;
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	1a 82       	std	Y+2, r1	; 0x02
 15c:	1b 82       	std	Y+3, r1	; 0x03
 15e:	1c 82       	std	Y+4, r1	; 0x04
		while (read_flag)
		{
			
			flash_read_one_word(&base_address, &data_read);
 160:	be 01       	movw	r22, r28
 162:	6b 5f       	subi	r22, 0xFB	; 251
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	19 d0       	rcall	.+50     	; 0x19e <flash_read_one_word>
	}
}

void echo(uint8_t ch)
{
	USART_0_write(ch);
 16c:	8d 81       	ldd	r24, Y+5	; 0x05
 16e:	78 d0       	rcall	.+240    	; 0x260 <USART_0_write>
 170:	8e 81       	ldd	r24, Y+6	; 0x06
 172:	76 d0       	rcall	.+236    	; 0x260 <USART_0_write>
 174:	89 81       	ldd	r24, Y+1	; 0x01
		{
			
			flash_read_one_word(&base_address, &data_read);
			echo(data_read);
			echo(data_read >> 8);
			base_address++;
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	ab 81       	ldd	r26, Y+3	; 0x03
 17a:	bc 81       	ldd	r27, Y+4	; 0x04
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	a1 1d       	adc	r26, r1
 180:	b1 1d       	adc	r27, r1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	ab 83       	std	Y+3, r26	; 0x03
 188:	bc 83       	std	Y+4, r27	; 0x04
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	81 ee       	ldi	r24, 0xE1	; 225
 18e:	94 e0       	ldi	r25, 0x04	; 4
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x7c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x86>
 19a:	00 00       	nop
 19c:	e1 cf       	rjmp	.-62     	; 0x160 <main+0x4c>

0000019e <flash_read_one_word>:
 19e:	0f 93       	push	r16
	FLASH_CTRL_PORT |= (1 << WE_PIN);
	_NOP(); // WE pulse width high
}

void flash_read_one_word(uint32_t *address, uint16_t *word)
{
 1a0:	1f 93       	push	r17
 1a2:	dc 01       	movw	r26, r24
	// Set data ports to input in case they aren't
	DATA_D0_D7_DDR = 0x00;
 1a4:	17 b8       	out	0x07, r1	; 7
	DATA_D8_D15_DDR = 0x00;
 1a6:	11 b8       	out	0x01, r1	; 1
	
	// WE should be high for read operation
	FLASH_CTRL_PORT |= (1 << WE_PIN);
 1a8:	eb e0       	ldi	r30, 0x0B	; 11
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
 * Address has to be spread out over three physical ports.
 */
static inline void write_address_to_port(const uint32_t *address)
{
	// Set up address on lines A0 - A7
	ADDR_A0_A7_PORT = *address;
 1b2:	8c 91       	ld	r24, X
 1b4:	81 bb       	out	0x11, r24	; 17
	// Set up address on lines A8 - A15
	ADDR_A8_A15_PORT = (*address >> 8);
 1b6:	0d 91       	ld	r16, X+
 1b8:	1d 91       	ld	r17, X+
 1ba:	2d 91       	ld	r18, X+
 1bc:	3c 91       	ld	r19, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	01 2f       	mov	r16, r17
 1c2:	12 2f       	mov	r17, r18
 1c4:	23 2f       	mov	r18, r19
 1c6:	33 27       	eor	r19, r19
 1c8:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	// Set up address on lines A16 -A18
	ADDR_A16_A18_PORT |= ((*address >> 16) & ADDR_A16_A18_MASK);
 1cc:	90 81       	ld	r25, Z
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	8c 91       	ld	r24, X
 1d2:	87 70       	andi	r24, 0x07	; 7
 1d4:	89 2b       	or	r24, r25
 1d6:	80 83       	st	Z, r24
	
	// Put address on the bus
	write_address_to_port(address);
	
	// Pull CE low to enable chip in case it isn't
	FLASH_CTRL_PORT &= ~(1 << CE_PIN);
 1d8:	80 81       	ld	r24, Z
 1da:	87 7f       	andi	r24, 0xF7	; 247
 1dc:	80 83       	st	Z, r24
	
	// Pull OE low to activate output
	FLASH_CTRL_PORT &= ~(1 << OE_PIN);
 1de:	80 81       	ld	r24, Z
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	80 83       	st	Z, r24
	
	// Wait for address access time min 70ns
	_NOP(); // one NOP should be 62.5ns at 16MHz
 1e4:	00 00       	nop
	//_NOP();
	
	// Read high byte from data lines D15 - D8
	*word = (DATA_D8_D15_PIN << 8);
 1e6:	80 b1       	in	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	98 2f       	mov	r25, r24
 1ec:	88 27       	eor	r24, r24
 1ee:	db 01       	movw	r26, r22
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	9c 93       	st	X, r25
 1f4:	8e 93       	st	-X, r24
	// Read low byte from data lines D7 - D0
	*word |= DATA_D0_D7_PIN;
 1f6:	26 b1       	in	r18, 0x06	; 6
 1f8:	82 2b       	or	r24, r18
 1fa:	8d 93       	st	X+, r24
 1fc:	9c 93       	st	X, r25
	
	// Pull OE high to disable output
	FLASH_CTRL_PORT |= (1 << OE_PIN);
 1fe:	80 81       	ld	r24, Z
 200:	80 61       	ori	r24, 0x10	; 16
 202:	80 83       	st	Z, r24
}
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <i_o_init>:
}

void i_o_init()
{
	// Disable internal pull up resistors
	MCUCR |= (1 << PUD);
 20a:	85 b7       	in	r24, 0x35	; 53
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	85 bf       	out	0x35, r24	; 53
	
	// Set flash memory control lines to output
	FLASH_CTRL_DDR |= (1 << CE_PIN) | (1 << OE_PIN) | (1 << WE_PIN);
 210:	ea e0       	ldi	r30, 0x0A	; 10
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	80 81       	ld	r24, Z
 216:	88 63       	ori	r24, 0x38	; 56
 218:	80 83       	st	Z, r24
	
	// Flash memory control lines are active low, start disabled
	FLASH_CTRL_PORT |= (1 << CE_PIN) | (1 << OE_PIN) | (1 << WE_PIN);	
 21a:	ab e0       	ldi	r26, 0x0B	; 11
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	8c 91       	ld	r24, X
 220:	88 63       	ori	r24, 0x38	; 56
 222:	8c 93       	st	X, r24
	
	// Set address bus pins A16 - A18 to output
	ADDR_A16_A18_DDR |= ADDR_A16_A18_MASK;
 224:	80 81       	ld	r24, Z
 226:	87 60       	ori	r24, 0x07	; 7
 228:	80 83       	st	Z, r24
	
	// Set address bus pins A8 - A15 to output
	ADDR_A8_A15_DDR = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	
	// Set address bus pins A0 - A7 to output
	ADDR_A0_A7_DDR = 0xFF;
 230:	80 bb       	out	0x10, r24	; 16
	//DATA_D8_D15_DDR = 0xFF;
	
	// Set data bus pins D0 - D7 to output
	//DATA_D0_D7_DDR = 0xFF;
	
	DDRB |= (1 << PB7);
 232:	27 9a       	sbi	0x04, 7	; 4
 234:	08 95       	ret

00000236 <system_init>:


void device_init()
{
	//TIMER_0_init();
	USART_0_init();
 236:	02 d0       	rcall	.+4      	; 0x23c <USART_0_init>
#include <setup.h>

void system_init()
{
	device_init();
	i_o_init();
 238:	e8 cf       	rjmp	.-48     	; 0x20a <i_o_init>
 23a:	08 95       	ret

0000023c <USART_0_init>:
 23c:	e4 e6       	ldi	r30, 0x64	; 100
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
	;
	return UDR0;
}
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	80 83       	st	Z, r24
 246:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 256:	88 e9       	ldi	r24, 0x98	; 152
 258:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret

00000260 <USART_0_write>:

void USART_0_write(const uint8_t data)
{
	UDR0 = data;
 260:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (!(UCSR0A & (1 << UDRE0)));
 264:	e0 ec       	ldi	r30, 0xC0	; 192
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	85 ff       	sbrs	r24, 5
 26c:	fd cf       	rjmp	.-6      	; 0x268 <USART_0_write+0x8>
}
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
